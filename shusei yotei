!pip install mecab-python3
!pip install unidic-lite


import MeCab
import re
import csv
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

df = pd.read_csv("aaaa.csv")

#MeCabのインスタンスを作成する
mecab = MeCab.Tagger('')


wordFeat_dic1 = {}
wordFeat_dic2 = {}
wordFeat_dic3 = {}
wordcount_output1 = []
wordcount_output2 = []
wordcount_output3 = []

 
#単語頻出度カウント
def WordFeatureCount1(word):
        if word in wordFeat_dic1:
            wordFeat_dic1[word] +=1
        else:
            wordFeat_dic1.setdefault(word, 1)
        return wordFeat_dic1
    
def WordFeatureCount2(word):
        if word in wordFeat_dic2:
            wordFeat_dic2[word] +=1
        else:
            wordFeat_dic2.setdefault(word, 1)
        return wordFeat_dic2
    
def WordFeatureCount3(word):
        if word in wordFeat_dic3:
            wordFeat_dic3[word] +=1
        else:
            wordFeat_dic3.setdefault(word, 1)
        return wordFeat_dic3


#最終的な結果を出力するためのData Frameを作成する
df1 = pd.DataFrame( columns=['user','word0','word1','word2','word3','word4','word5','word6'] )


#dfにセットしたcsvファイルを一行ずつ読み込む
for row, item in df.iterrows():
    #形態素解析結果をセットする変数。一行ずつ（opinionaireid単位）処理するため、処理前に一度クリアする
    result = ''
    
    #一行ずつ形態素解析を行い、単語ごとに分ける
    result = mecab.parse(item[0])
    node = mecab.parseToNode(item[0])
    #一行ごとに分けて変数にセットする
    lines = result.split("\n")
    
    #名詞、動詞、形容詞、形容動詞を抽出する
    while node:
        if node.feature.split(",")[0] == "名詞":
            word = node.surface
            WordFeatureCount1(word)
        elif node.feature.split(",")[0] =="動詞":
            word = node.surface
            WordFeatureCount2(word)
        elif node.feature.split(",")[0] == "形容詞":
            word = node.surface
            WordFeatureCount3(word)
        else:pass
        node = node.next
    #後ろから２列は不要のため削除する
    lines = lines[0:-2]
    #一行ずつに分けた形態素解析結果の変数を上から順に読み込む
    for words in lines:
        #タブとカンマで区切られているため、配列して新たな変数にセットする
        word = re.split('\t|,',words)
        #結果をData Frameにセットする
        df1 = df1.append({'user':row, 'word0':word[0], 'word1':word[1], 
                          'word2':word[2], 'word3':word[3], 'word4':word[4], 'word5':word[5], 
                          'word6':word[6]},ignore_index=True)        

#リストを昇順にする       
for item in wordFeat_dic1.items():
    wordcount_output1.append(item)
wordcount_output1 = sorted(wordcount_output1, key = lambda x:x[1], reverse=True)    
for item in wordFeat_dic2.items():
    wordcount_output2.append(item)
wordcount_output2 = sorted(wordcount_output2, key = lambda x:x[1], reverse=True) 
for item in wordFeat_dic3.items():
    wordcount_output3.append(item)
wordcount_output3 = sorted(wordcount_output3, key = lambda x:x[1], reverse=True) 
    
list1 = []
list2 = []
list3 = []
left = []
height = []

#上位10番目までを抽出
for n in range(10):
    list1.append(wordcount_output1[n])
for n in range(10):
    list2.append(wordcount_output2[n])
for n in range(10):
    list3.append(wordcount_output3[n])

#タプルからリストに変更
for x, y in list1:
    left.append(x)
    height.append(y)
# グラフの詳細設定
plt.bar(left, height, width=0.5, color='#0096c8',
        edgecolor='b', linewidth=2)
plt.show()
print(list1)
left = []
height = []
for x, y in list2:
    left.append(x)
    height.append(y)
# グラフの詳細設定
plt.bar(left, height, width=0.5, color='#0096c8',
        edgecolor='b', linewidth=2)
plt.show()
print(list2)
left = []
height = []
for x, y in list3:
    left.append(x)
    height.append(y)
# グラフの詳細設定
plt.bar(left, height, width=0.5, color='#0096c8',
        edgecolor='b', linewidth=2)
plt.show()
print(list3)
    

#CSVで保存する    
df1.to_csv("test.csv")

header = ['単語(昇順)', '個数']
with open('test2.csv', 'w', newline='') as file:
    writer = csv.writer(file, quoting=csv.QUOTE_ALL,delimiter=';')
    writer.writerow(header)
    writer.writerows(wordcount_output1)
with open('test3.csv', 'w', newline='') as file:
    writer = csv.writer(file, quoting=csv.QUOTE_ALL,delimiter=';')
    writer.writerow(header)
    writer.writerows(wordcount_output2)
with open('test4.csv', 'w', newline='') as file:
    writer = csv.writer(file, quoting=csv.QUOTE_ALL,delimiter=';')
    writer.writerow(header)
    writer.writerows(wordcount_output3)
